Index: rango/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.shortcuts import render\r\nfrom django.http import HttpResponse\r\nfrom rango.models import Category, Page\r\nfrom rango.forms import CategoryForm, PageForm\r\nfrom django.shortcuts import redirect\r\nfrom django.urls import reverse\r\n\r\ndef index(request):\r\n    # return HttpResponse(\"Rango says hey there partner! <a href='/rango/about/'>About</a>\")\r\n    # context_dict = {'boldmessage': 'Crunchy, creamy, cookie, candy, cupcake!'}\r\n\r\n    category_list = Category.objects.order_by('-likes')[:5]\r\n    page_list = Page.objects.order_by('-views')[:5]\r\n\r\n    context_dict = {}\r\n    context_dict['boldmessage'] = 'Crunchy, creamy, cookie, candy, cupcake!'\r\n    context_dict['categories'] = category_list\r\n    context_dict['pages'] = page_list\r\n    context_dict['extra'] = 'From the model solution on GitHub'\r\n\r\n    return render(request, 'rango/index.html', context=context_dict)\r\n\r\ndef about(request):\r\n    # return HttpResponse(\"Rango says here is the about page. <a href='/rango/'>Index</a>\")\r\n    return render(request, 'rango/about.html')\r\n\r\ndef show_category(request, category_name_slug):\r\n    # creat a context dictionary which we can pass\r\n    #to thhe template rendering engine.\r\n    context_dict = {}\r\n\r\n    try:\r\n        category = Category.objects.get(slug=category_name_slug)\r\n\r\n        pages = Page.objects.filter(category=category)\r\n\r\n        context_dict['pages'] = pages\r\n\r\n        context_dict['category'] = category\r\n\r\n    except Category.DoesNotExist:\r\n\r\n        context_dict['category'] = None\r\n        context_dict['pages'] = None\r\n\r\n    return render(request, 'rango/category.html', context=context_dict)\r\n\r\ndef add_category(request):\r\n    form = CategoryForm()\r\n\r\n    if request.method == 'POST':\r\n        form = CategoryForm(request.POST)\r\n\r\n        if form.is_valid():\r\n            form.save(commit=True)\r\n\r\n            return redirect('/rango')\r\n        else:\r\n            print(form.errors)\r\n\r\n    return render(request, 'rango/add_category.html', {'form': form})\r\n\r\n\r\ndef add_page(request, category_name_slug):\r\n    try:\r\n        category = Category.objects.get(slug=category_name_slug)\r\n    except:\r\n        category = None\r\n\r\n    if category is None:\r\n        return redirect('/rango/')\r\n\r\n    form = PageForm()\r\n\r\n    if request.method == 'POST':\r\n        form = PageForm(request.POST)\r\n\r\n        if form.is_valid():\r\n            if category:\r\n                page = form.save(commit=False)\r\n                page.category = category\r\n                page.views = 0\r\n                page.save()\r\n\r\n                return redirect(reverse('rango:show_category', kwargs={'category_name_slug': category_name_slug}))\r\n        else:\r\n            print(form.errors)\r\n\r\n    context_dict = {'form': form, 'category': category}\r\n    return render(request, 'rango/add_page.html', context=context_dict)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/rango/views.py b/rango/views.py
--- a/rango/views.py	(revision 1b82378104ceed77c0f10403a018a57911a64371)
+++ b/rango/views.py	(date 1644859613691)
@@ -16,7 +16,6 @@
     context_dict['boldmessage'] = 'Crunchy, creamy, cookie, candy, cupcake!'
     context_dict['categories'] = category_list
     context_dict['pages'] = page_list
-    context_dict['extra'] = 'From the model solution on GitHub'
 
     return render(request, 'rango/index.html', context=context_dict)
 
